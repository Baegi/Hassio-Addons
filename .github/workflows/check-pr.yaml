name: Check PR Build
on:
  pull_request:
    branches:
      - master

jobs:
  check-addon-changes:
    runs-on: ubuntu-latest
    outputs:
      changedAddons: ${{ steps.filter.outputs.changes }}
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Detect chanced files
      uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: .github/paths-filter.yml

  check-build:
    name: Check build
    runs-on: ubuntu-latest
    needs: check-addon-changes
    strategy:
      matrix:
        addon: ${{ fromJSON(needs.check-addon-changes.outputs.changedAddons) }}
    container:
      image: homeassistant/amd64-builder:2021.02.0
      options: --rm --privileged
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Get config
        id: config
        shell: bash
        run: |
          IFS='/' read -r registry imagetemplate <<< "$(jq -r '.image' "${{ matrix.addon }}/config.json")"
          version=$(jq -r '.version' "${{ matrix.addon }}/config.json")
          archs=$(jq -r '.arch // ["armv7", "armhf", "amd64", "aarch64", "i386"] | [.[] | .] | join(" ")' "${{ matrix.addon }}/config.json")
          archs_param=$(jq -r '.arch // ["armv7", "armhf", "amd64", "aarch64", "i386"] | [.[] | "--" + .] | join(" ")' ${{ matrix.addon }}/config.json)

          echo "Docker Registry: $registry"
          echo "Imagetemplate: $imagetemplate"
          echo "Version: $version"
          echo "Architectures: $archs"

          echo "::set-output name=registry::$registry"        
          echo "::set-output name=imagetemplate::$imagetemplate"
          echo "::set-output name=version::$version"
          echo "::set-output name=archs_param::$archs_param"

      - name: Build addon
        run: >
          /usr/bin/builder.sh
          ${{ steps.config.outputs.archs_param }}
          -t ${{ matrix.addon }}
          -d ${{ steps.config.outputs.registry }}
          -i ${{ steps.config.outputs.imagetemplate }}
          --cache-tag cache
          --no-latest
          --test

      - name: Check images
        shell: bash
        run: |
          missing=0
          for image_name in ${{ steps.config.outputs.image_names }}; do
            if [[ "$(docker images -q "$image_name:${{ steps.config.outputs.version }}" 2> /dev/null)" == "" ]]; then
              echo "::error::No local image for $image_name found."
              missing=$((missing + 1))
            else
              echo "Image $image_name found."
            fi
          done
          if [ "$missing" -gt "0" ]; then
            docker images
            exit 1
          fi
