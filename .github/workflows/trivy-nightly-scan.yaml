name: Trivy security scan
on:
  schedule:
    - cron:  '0 0 * * *'

jobs:

  get-images:
    name: Gather images to check
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.config.outputs.images }}
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Get images to check
        id: config
        shell: bash
        run: |
          versioned_images=""

          configs=$(find . -type f -name "config.json")
          for config in $configs; do

            IFS='/' read -r registry imagetemplate <<< "$(jq -r '.image' $config)"
            version=$(jq -r '.version' "$config")
            archs=$(jq -r '.arch // ["armv7", "armhf", "amd64", "aarch64", "i386"] | [.[] | .] | join(" ")' "$config")

            image_names=""
            if [[ "$imagetemplate" != 'null' ]]; then
              for arch in ${archs}; do
                image_names="${image_names} ${registry}/${imagetemplate/\{arch\}/$arch}"
              done
            fi

            for image_name in $image_names; do
              versioned_images="${versioned_images} ${image_name}:${version}"
            done
          done
          
          versioned_images=$(jq -n --compact-output --arg v "$versioned_images" '[$v|split(" ")|.[]|select(length > 0)]')
          echo "Images to check: $versioned_images"

          echo "::set-output name=images::$versioned_images"        

  check-images:
    name: Run Trivy Scan
    runs-on: ubuntu-latest
    needs: get-images
    strategy:
      matrix:
        image: ${{ fromJSON(needs.get-images.outputs.images) }}
    steps:

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.image }}
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'